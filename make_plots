#! /usr/bin/env ruby

require('optparse')
require('json')
require('erb')

# Parse the command line arguments
optparse = OptionParser.new do |opts|
	opts.banner = "Usage: {$0} <result dir>..."

	opts.on('-h', '--help', 'Display this screen') do
		puts opts
		exit
	end
end
optparse.parse!

class Plotter
	attr_reader :controllers, :computes, :title, :x_label, :y_label

	def initialize()
		@controllers	= nil
		@nodes			= nil
		@source			= nil
		@title			= nil
		@x_label			= nil
		@y_label			= nil
	end

	# Walks into a directory and looks for JSON files to extract
	# energy data.
	#
	# == Parameters:
	# dir::
	#   the path of the directory to explore
	def walk(dir)
		headers = generate_headers(dir)

		Dir.foreach(dir) do |file|
			next if ['.', '..', 'config.json'].include?(file)
			next unless file.end_with? '.json'

			file = generate_data(File.join(dir, file), headers)
			plot = generate_plot(file, headers)
		end
	end

	# Initialize the data structure that will hold the energy
	# metrics. This method looks for a config.json file in the
	# given directory and gets the names of nodes from there.
	#
	# == Parameters:
	# dir::
	#   the directory from which the headers must be acquired
	# 
	# == Returns:
	# A Array containing OpenStack controllers and compute nodes.
	def generate_headers(dir)
		config = JSON.parse(File.read(File.join(dir, 'config.json')))
		headers						= {}
		headers[:controllers]	= {}
		headers[:computes] 		= {}

		config['os-controllers'].each { |c| headers[:controllers][c[/\w+\-\d+/]] = {} }
		config['os-computes'].each { |c| headers[:computes][c[/\w+\-\d+/]] = {} }

		return headers
	end

	# Extract metrics from a JSON file and writes them to a CSV file.
	#
	# == Parameters:
	# file::
	#   the file to extract metrics from
	# headers::
	#   an Array containing the controllers and compute nodes
	#
	# == Returns:
	# A String containing the path to the files where the CSV data has been
	# written.
	def generate_data(file, headers)
		data = headers.dup

		js = JSON.parse(File.read(file).gsub(/u'([^\']*)'/, '"\1"'))
		data[:timestamps] = js['items'][0]['timestamps'].map {|val| val.to_i }
		
		js['items'].each do |serie|
			host = serie['uid']

			if data[:controllers].include? host then
				data[:controllers][host] = serie['values']
			else
				data[:computes][host] = serie['values']
			end
		end

		dir = File.dirname(file)
		name = File.basename(file, '.json') + '.csv'
		file = File.new(File.join(dir, name), 'w')

		file.write 'Time'
		#headers[:controllers].each_key { |key| file.write ",\t#{key}" }
		headers[:computes].each_key    { |key| file.write ",\t'#{key}'" }
		file.write "\n"

		data[:timestamps].each_index do |i|

			file.write data[:timestamps][i]
			#data[:controllers].each_value { |c| file.write ",\t#{c[i]}" }
			data[:computes].each_value    { |c| file.write ",\t#{c[i]}" }
			file.write "\n"
		end

		file.close
		return file.path
	end

	def generate_plot(file, headers)
		# Let's write a R script
		renderer = ERB.new(File.read('template/energy.erb'))
		@source = file
		@nodes = headers[:computes].keys
		@title = 'Energy consumption of compute nodes'
		@x_label = 'Time (sec)'
		@y_label = 'Energy (watt)'

		script = renderer.result(binding)

		dir = File.dirname(file)
		name = File.basename(file, '.csv') + '.r'
		file = File.new(File.join(dir, name), 'w')
		file.write(script)
		file.close

		system "/usr/bin/env Rscript #{file.path}"
	end
end

ARGV.each do |dir|
	plotter = Plotter.new()
	plotter.walk dir
end


